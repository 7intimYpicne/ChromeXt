package org.matrix.chromext.script

import java.io.File
import java.io.FileReader
import org.json.JSONArray
import org.json.JSONObject
import org.matrix.chromext.Chrome
import org.matrix.chromext.utils.Log

object GM {

val grant = Chrome.getContext().assets.open("local_script.js").bufferedReader().use {
                it.readText()
              }.split("// Kotlin separator\n\n").associateBy({it.lines()[0].split("(")[0].split(" ")[1]}, {it})

fun bootstrap(script: Script): String? {
  var code = script.code
  var grants = ""

  if (!script.meta.startsWith("// ==UserScript==")) {
    code = script.meta + code
  }

    if (script.storage == "") {
      script.storage = "{}"
    }

if (script.resource.size > 0) {
        val Resources = JSONArray()
        runCatching {
              script.resource.forEach {
                val content = it.split(" ")
                if (content.size != 2) throw Exception("Error processing resource: ${it}")
                val name = content.first()
                val url = content.last()
                val resource = JSONObject()
                resource.put("name", name)
                resource.put("url", url.split("#").first())
                val file =
                    File(
                        Chrome.getContext().getExternalFilesDir(null),
                        resourcePath(script.id, name))
                if (file.exists()) {
                  val text = FileReader(file).use { it.readText() }
                  resource.put("content", text)
                }
                Resources.put(resource)
              }
            }
            .onFailure { Log.ex(it) }
        grants += "GM_info.script.resources = ${Resources};"
}

  script.grant.forEach granting@{
    val function = it
    // Log.d("Granting ${function} to ${script.id}")
    when (function) {
      "GM_info" -> return@granting
      "unsafeWindow" -> grants += "const unsafeWindow = window;" 
      "GM_log" -> grants += "const GM_log = console.log.bind(console);"
      "GM_getResourceText" -> {


      }
      else ->
          if (!function.contains(".")) {
            code =
                "function ${function}(...args) {console.error('${function} is not implemented in ChromeXt yet, called with', args)}" +
                    code
          } else if (function.startsWith("GM.")) {
            val name = function.substring(3)
            if (name == "xmlHttpRequest" && script.grant.contains("GM_xmlhttpRequest")) {
              code = "GM.xmlHttpRequest = GM_xmlhttpRequest;" + code
            } else if (script.grant.contains("GM_${name}")) {
              code =
                  "${function} = async (...arguments) => new Promise((resolve, reject) => {resolve(GM_${name}(...arguments))});" +
                      code
            }
          }
    }
  }

  code =
      "void(const GM = {}; const GM_info = { scriptMetaStr: `${script.meta}`, storage: ${script.storage}, script: { id: `${script.id}`, code: () => {${code}} } });"

  return code
}
}

const val openEruda =
    "try { if (eruda._isInit) {eruda.hide(); eruda.destroy();} else {eruda.init(); eruda._localConfig(); eruda.show();} } catch (e) { globalThis.ChromeXt(JSON.stringify({ action: 'loadEruda', payload: ''})) }"

const val cspRule =
    "if (ChromeXt.cspRules) {const meta = document.createElement('meta'); meta.setAttribute('http-equiv', 'Content-Security-Policy'); meta.setAttribute('content', ChromeXt.cspRules); try { document.head.append(meta); } catch { setTimeout(() => {document.head.append(meta); }, 0); }}"
